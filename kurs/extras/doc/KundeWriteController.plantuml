' Copyright (C) 2019 - present Juergen Zimmermann, Hochschule Karlsruhe
'
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <https://www.gnu.org/licenses/>.
@startuml KundeWriteController

skinparam classAttributeIconSize 0

package org.springframework {
package stereotype {
        interface "@Controller" as Controller
    }

    package web.bind.annotation {
        interface "@RequestMapping" as RequestMapping
        interface "@PathVariable" as PathVariable
        interface "@RequestBody" as RequestBody
        interface "@ExceptionHandler" as ExceptionHandler
    }

    package http {
        class ResponseEntity<T>
        class ProblemDetail

        package converter {
            class HttpMessageNotReadableException
        }

        ResponseEntity .[hidden].> ProblemDetail
        ProblemDetail .[hidden].> HttpMessageNotReadableException
    }
}

package jakarta.servlet.http {
    interface HttpServletRequest
}

package java.util {
    interface Collection<T>
    class UUID

    UUID .up[hidden].> Collection
    Collection .up[hidden].> HttpServletRequest
}

package com.acme.kunde {
    package service {
        class KundeWriteService << control >> << @Service >>

        class ConstraintViolationsException
        class EmailExistsException
    }

    package rest #DDDDDD {
        package patch {
            class PatchOperation <<entity>>
        }

        class KundeDTO <<entity>>

        class KundeWriteController << boundary >> << @Controller >> << @RequestMapping >> {
            + @PostMapping post(@RequestBody KundeDTO: KundeDTO, request: HttpServletRequest): ResponseEntity<Void>
            + @PutMapping put(@PathVariable id: UUID, @RequestBody KundeDTO: KundeDTO)
            + @PatchMapping patch(@PathVariable id: UUID, @RequestBody patchOps: Collection<PatchOperation>)
            + @DeleteMapping deleteById(@PathVariable id: UUID)
            + @ExceptionHandler onConstraintViolations(ex: ConstraintViolationsException, req: HttpServletRequest): ResponseEntity<ProblemDetail>
            + @ExceptionHandler onEmailExists(ex: EmailExistsException, req: HttpServletRequest): ResponseEntity<ProblemDetail>
            + @ExceptionHandler onMessageNotReadable(ex: HttpMessageNotReadableException, req: HttpServletRequest): ResponseEntity<ProblemDetail>
        }

        KundeWriteController o-down-> "1" KundeWriteService : service
        KundeWriteController ..> KundeDTO
        KundeWriteController ..> ConstraintViolationsException
        KundeWriteController ..> EmailExistsException
        KundeWriteController ..> PatchOperation

        KundeWriteController .up.> ResponseEntity
        KundeWriteController .up.> ProblemDetail
        KundeWriteController .up.> HttpMessageNotReadableException
        KundeWriteController .right.> HttpServletRequest

        KundeWriteController .up.> Controller
        KundeWriteController .up.> RequestMapping
        KundeWriteController .up.> PathVariable
        KundeWriteController .up.> RequestBody
        KundeWriteController .up.> ExceptionHandler

        KundeWriteController .right.> UUID
        KundeWriteController .right.> Collection

        PatchOperation .[hidden].> KundeWriteService
    }
}

hide empty members

footer (c) Juergen Zimmermann

@enduml
